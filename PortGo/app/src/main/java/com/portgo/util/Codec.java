/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.portgo.util;

import android.content.Intent;
import androidx.annotation.NonNull;
import android.text.TextUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class Codec extends Object implements Comparable {
	int mCodecId,mPriority;
	String  mCodecName;
	boolean mEnable;
	boolean premiumPoints= false;
	boolean preminumed = false;
    public static final String PRODUCT_ID = "com.portgo.codec.advancecodec";
	public Codec(int codecId,String codecName,int priority, boolean enable){
		this.mCodecId=codecId;
		this.mCodecName=codecName;
		this.mEnable = enable;
		this.mPriority = priority;
	}

	private Codec(){
    }

    public void setPriority(int priority) {
        this.mPriority = priority;
    }

    public String getCodecName() {
        return mCodecName;
    }

    public int getCodecId() {
        return mCodecId;
    }

    public void setPreminumed(boolean preminumed) {
        this.preminumed = preminumed;
    }

    public boolean getPreminumed() {
        return preminumed;
    }

    public void setNeedPremium(boolean premiumPoint){
	    this.premiumPoints = premiumPoint;
    }

    public boolean isPremiumPoints(){
        return this.premiumPoints;
    }

    public int getPriority() {
        return mPriority;
    }
    public boolean isEnable(){
        if(isPremiumPoints()&&!getPreminumed()){
            return false;
        }
        return mEnable;
    }

    public void setEnable(boolean enable) {
        this.mEnable = enable;
    }

    @Override
    public String toString() {
        return mCodecName+" "+isEnable()+" "+mCodecId+" "+mPriority+" "+isPremiumPoints();
    }

    @Override
    public int compareTo(@NonNull Object o) {
        Codec code = (Codec) o;
        return this.getPriority() - code.getPriority(); // 按书的id比较大小，用于默认排序
    }

    public static class CodecBuilder{
		String codec = null;
		String split=null;
		void  setEncodeString(String encodeCodec){
			codec = encodeCodec;
		}
		void  setSplit(String split){
			this.split = split;
		}

		public Codec build(){
			if(TextUtils.isEmpty(codec)||TextUtils.isEmpty(split)){
				return null;
			}else {
				String[] groups = codec.split(split);
				if(groups.length!=5){
					return null;
				}else{
                    Codec codec = new Codec();
                    if(praseName(codec,groups[0])&&praseCheckState(codec,groups[1])&&
                            praseID(codec,groups[2])&&prasePriority(codec,groups[3])&&prasePremiumPoionts(codec,groups[4])){
                        return codec;
                    }else {
                        return null;
                    }
				}
			}
		}
		public Codec build(String encodeCodec,String split){
            setEncodeString(encodeCodec);
            setSplit(split);
            return build();
		}

		private boolean praseName(Codec codec ,String value){
			if(!TextUtils.isEmpty(value)){
				codec.mCodecName = value;
				return true;
			}
			return false;
		}
		private boolean praseCheckState(Codec codec ,String value){
			if(!TextUtils.isEmpty(value)){
                try {
                    codec.mEnable =  Boolean.parseBoolean(value);
                    return true;
                }catch (Exception e){
                    return false;
                }
			}
			return false;
		}

		private boolean praseID(Codec codec ,String value){
			if(!TextUtils.isEmpty(value)){
                try {
                    codec.mCodecId =  Integer.parseInt(value);
                    return true;
                }catch (Exception e){
                    return false;
                }
			}
			return false;
		}

        private boolean prasePremiumPoionts(Codec codec ,String value){
            if(!TextUtils.isEmpty(value)){
                try {
                    codec.premiumPoints =  Boolean.parseBoolean(value);
                    return true;
                }catch (Exception e){
                    return false;
                }
            }
            return false;
        }

		private boolean prasePriority(Codec codec ,String value){
			if(!TextUtils.isEmpty(value)){
                try {
                    codec.mPriority =  Integer.parseInt(value);
                    return true;
                }catch (Exception e){
                    return false;
                }

			}
			return false;
		}
	}


    static public List<Codec> getCodecList(String [] encodeCodec){
        List<Codec> codecs = new ArrayList<Codec>();
        for(String codecString:encodeCodec){
            Codec.CodecBuilder builder = new Codec.CodecBuilder();
            Codec codec = builder.build(codecString," ");
            if(codec!=null){
                codecs.add(codec);
            }
        }
        return codecs;
    }

    static public List<Codec> getCodecList(Set<String> encodeCodec){
        List<Codec> codecs = new ArrayList<>();
        for(String codecString:encodeCodec){
            Codec.CodecBuilder builder = new Codec.CodecBuilder();
            Codec codec = builder.build(codecString," ");
            if(codec!=null){
                codecs.add(codec);
            }
        }
        return codecs;
    }
}