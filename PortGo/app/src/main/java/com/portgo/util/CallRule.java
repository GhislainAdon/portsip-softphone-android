/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.portgo.util;

import android.database.Cursor;
import android.text.TextUtils;

import com.portgo.database.DBHelperBase;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CallRule {
	int mAccountId,mRuleId,mPriority;
	String mName,mMatcher,mAddPrefix,mRemoveFrefix;
	boolean mEnable;

	public CallRule(int ruleId,int accountId,
			String name,String matcher,String addPrefix,String removeFrefix,int priority,boolean enable){
		this.mAccountId=accountId;
		this.mRuleId =ruleId;
		this.mName=name;
		this.mMatcher=matcher;
		this.mAddPrefix=addPrefix;
		this.mRemoveFrefix=removeFrefix;
		this.mEnable = enable;
		this.mPriority = priority;
	}

	static public CallRule callRuleFromCursor(Cursor cursor){
		int indexId = cursor.getColumnIndex(DBHelperBase.CallRuleColumns._ID);
		int indexAccountId = cursor.getColumnIndex(DBHelperBase.CallRuleColumns.CALL_RULE_ACCOUNT_ID);
		int indexAdd = cursor.getColumnIndex(DBHelperBase.CallRuleColumns.CALL_RULE_ADDPREFIX);
		int indexRemover = cursor.getColumnIndex(DBHelperBase.CallRuleColumns.CALL_RULE_REMOVEPREFIX);
		int indexMatcher = cursor.getColumnIndex(DBHelperBase.CallRuleColumns.CALL_RULE_MATCHER);
		int indexName = cursor.getColumnIndex(DBHelperBase.CallRuleColumns.CALL_RULE_NAME);
		int indexEnable = cursor.getColumnIndex(DBHelperBase.CallRuleColumns.CALL_RULE_ENABLE);
		int indexPriority = cursor.getColumnIndex(DBHelperBase.CallRuleColumns.CALL_RULE_PRIORITY);
		int ruleId = -1,accountId=-1,priority=0;
		Boolean enable =false;
		String name=null,matcher=null,add=null,remover=null;
		if(indexId>-1) {
			ruleId = cursor.getInt(indexId);
		}
		if(indexAccountId>-1) {
			accountId = cursor.getInt(indexAccountId);
		}
		if(indexName>-1) {
			name = cursor.getString(indexName);
		}
		if(indexMatcher>-1) {
			matcher = cursor.getString(indexMatcher);
		}
		if(indexRemover>-1) {
			remover = cursor.getString(indexRemover);
		}
		if(indexAdd>-1) {
			add= cursor.getString(indexAdd);
		}
		if(indexPriority>-1) {
			priority = cursor.getInt(indexPriority);
		}
		if(indexEnable>-1) {
			enable = cursor.getInt(indexEnable)>-1;
		}

		return new CallRule(ruleId,accountId,name,matcher,add,remover,priority,enable);
	}
	public String getName() {
		return mName;
	}

	public String getMatcher() {
		return mMatcher;
	}

	public int getRuleId() {
		return mRuleId;
	}

	public String getAddPrefix() {
		return mAddPrefix;
	}


	public String getRemoveFrefix() {
		return mRemoveFrefix;
	}

	public int getAccountId() {
		return mAccountId;
	}

	public int getPriority() {
		return mPriority;
	}

	public boolean isValidate(){
		if(TextUtils.isEmpty(mAddPrefix)&&TextUtils.isEmpty(mRemoveFrefix))
		{
			return false;
		}

		return  true;
	}

	public String getRuledUrl(String remote){
        if(!TextUtils.isEmpty(remote)&&isValidate()){
        	if(!TextUtils.isEmpty(mRemoveFrefix)&&remote.startsWith(mRemoveFrefix)) {
				remote = remote.replaceFirst(mRemoveFrefix, "");
			}
            remote=TextUtils.isEmpty(mAddPrefix)?remote:mAddPrefix+remote;
        }
        return  remote;
    }
}